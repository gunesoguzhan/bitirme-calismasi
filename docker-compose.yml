version: "3.8"

services:
  # mssql for microservices
  # docker run --name mssql --restart unsless-stopped -e ACCEPT_EULA=Y -e MSSQL_SA_PASSWORD=Qwer1234! -p 1433:1433 mcr.microsoft.com/mssql/server:2022-latest
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Qwer1234!
    ports:
      - 1433:1433

  # rabbitmq for async microservice communication
  # docker run --name rabbitmq --restart unless-stopped -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456  -p 5672:5672 -p 15672:15672 -v rabbitmq:/var/lib/rabbitmq --hostname rabbitmq rabbitmq:3-management
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=123456
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    hostname: rabbitmq

    # redis for signalling service
    # docker run --name my-redis --restart unless-stopped -p 6379:6379 redis
  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    ports:
      - 6379:6379

  # datalust/seq for centralized logging both ASP.NET Core and Node.js apps.
  # docker run --name seq --restart unless-stopped -e ACCEPT_EULA=Y -p 80:80 -p 5341:5341 -v seq-logs:/data datalust/seq
  seq:
    image: datalust/seq
    container_name: seq
    restart: unless-stopped
    environment: 
      - ACCEPT_EULA=Y
    ports:
      - 80:80
      - 5341:5341
    volumes:
      - seq-logs:/data

volumes:
  rabbitmq:
  seq-logs: